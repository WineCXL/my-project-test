# ================
# .gitignore 文件说明
# 作用：定义哪些文件/目录应被 Git 忽略，避免提交到仓库
# 原因：排除临时文件、IDE配置、编译产物等非必要内容，保持仓库精简
# ================

# ----------
# 构建目录和编译产物
# ----------
build/              # CMake生成的构建目录,包含临时文件和二进制产物
*.obj               # 编译器生成的中间对象文件(无需共享，可重新编译生成)
*.lib               # 静态库文件(由项目构建生成，无需提交)
*.exe               # 可执行文件(由编译生成，不同平台可能不同)
*.pdb               # 程序调试数据库文件(Visual Studio 生成，含调试信息)
*.ilk               # 增量链接文件(Visual Studio 生成，编译过程临时文件)
*.dll               # 动态链接库文件
*.so                # 共享对象文件(Linux动态库)
*.dylib             # macOS动态库文件

# ----------
# 依赖管理目录
# ----------
node_modules/       # Node.js 依赖目录(通过 npm/yarn 自动生成，体积庞大且可复现)
.pnp/               # Yarn PnP状态文件
.pnp.js             # Yarn PnP JavaScript文件
.yarn/              # Yarn缓存和配置目录
!.yarn/releases
!.yarn/plugins

# ----------
# 环境配置文件
# ----------
.env                # 环境变量文件(包含敏感信息如数据库密码等)
.env.local          # 本地环境变量文件
.env.development    # 开发环境变量文件
.env.test           # 测试环境变量文件
.env.production     # 生产环境变量文件
*.env.*             # 所有环境变量文件

# ----------
# IDE/编辑器特定文件
# ----------
.vscode/            # VSCode工作区配置(含用户特定的调试、任务设置，不应共享)
!.vscode/extensions.json   # 但允许共享推荐的扩展
!.vscode/settings.json     # 允许共享项目特定的设置
.idea/              # JetBrains IDE(如CLion)的配置文件
*.user              # Visual Studio用户特定配置(如窗口布局、调试路径)
*.suo               # Visual Studio解决方案用户选项(含本地缓存信息)
*.sln               # Visual Studio解决方案文件(由 CMake 生成，避免手动管理冲突)
*.vcxproj*          # Visual Studio项目文件(由 CMake 生成，避免手动管理冲突)
.project            # Eclipse项目文件
.classpath          # Eclipse类路径文件
.settings/          # Eclipse设置目录

# ----------
# 系统/临时文件
# ----------
.DS_Store           # macOS文件夹属性元数据(非跨平台必要文件)
Thumbs.db           # Windows缩略图缓存文件
*.log               # 日志文件(运行时生成，可能包含敏感信息)
*.tmp               # 临时文件
npm-debug.log*      # NPM调试日志
yarn-debug.log*     # Yarn调试日志
yarn-error.log*     # Yarn错误日志
lerna-debug.log*    # Lerna调试日志

# ----------
# CMake生成文件
# ----------
CMakeFiles/         # CMake生成的临时文件和目录
CMakeCache.txt      # CMake缓存文件
cmake_install.cmake # CMake安装脚本
Makefile            # CMake生成的Makefile
*.cmake             # 所有CMake配置文件

# ----------
# 前端构建目录
# ----------
frontend/dist/      # 前端构建输出目录
frontend/build/     # 前端构建目录
frontend/.cache/    # 前端构建缓存
frontend/public/dist/  # 前端公共资源构建目录
.sass-cache/        # Sass缓存目录
.vercel             # Vercel部署配置
.netlify            # Netlify部署配置

# ----------
# 后端特定文件
# ----------
backend/dist/       # 后端构建输出目录
backend/logs/       # 后端日志目录
backend/uploads/    # 上传文件目录(通常包含用户上传内容)
backend/coverage/   # 后端测试覆盖率报告

# ----------
# 文档生成
# ----------
docs/_build/        # 文档构建输出目录
docs/_static/       # 文档静态文件目录
docs/_templates/    # 文档模板目录
docs/api/_build/    # API文档构建输出目录
docs/examples/_build/ # 示例文档构建输出目录

# ----------
# 测试输出
# ----------
test_results/       # 测试结果目录
coverage/           # 代码覆盖率报告目录
*.test              # 测试输出文件
Testing/            # CMake测试目录
CTestTestfile.cmake # CTest测试文件
DartConfiguration.tcl # CTest配置文件
.nyc_output/       # NYC测试覆盖率输出

# ----------
# 安装目录
# ----------
install/            # 安装目录，包含所有安装的文件
dist/               # 分发目录，用于打包发布