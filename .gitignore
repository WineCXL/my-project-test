# ================
# .gitignore 文件说明
# 作用：定义哪些文件/目录应被 Git 忽略，避免提交到仓库
# 原因：排除临时文件、IDE配置、编译产物等非必要内容，保持仓库精简
# ================

# ----------
# 构建目录和编译产物
# ----------
build/              # CMake生成的构建目录(由CMake构建过程生成 | 包含大量临时文件且体积庞大)
*.obj               # 编译器生成的中间对象文件(由C++编译器生成 | 属于中间产物无需版本控制)
*.lib               # 静态库文件(由C++链接器生成 | 属于二进制文件体积较大且可重新生成)
*.exe               # 可执行文件(由C++链接器生成 | 属于二进制文件且特定于平台)
*.pdb               # 程序调试数据库文件(由VS编译器生成 | 仅供调试使用且体积庞大)
*.ilk               # 增量链接文件(由VS链接器生成 | 用于加速开发期间的链接过程 | 临时文件)
*.dll               # 动态链接库文件(由C++链接器或Node.js原生模块生成 | 二进制文件且特定于平台)
*.so                # 共享对象文件(由Linux上的GCC/Clang生成 | 属于特定平台的二进制文件)
*.dylib             # macOS动态库文件(由macOS上的Clang生成 | 属于特定平台的二进制文件)

# ----------
# 依赖管理目录
# ----------
node_modules/       # Node.js依赖目录(由npm/yarn自动生成 | 体积极大且依赖package.json可重建)
.pnp/               # Yarn PnP状态文件(由Yarn生成 | 属于临时文件可重新生成)
.pnp.js             # Yarn PnP JavaScript文件(由Yarn生成 | 属于配置文件可重新生成)
.yarn/              # Yarn缓存和配置目录(由Yarn生成 | 包含大量缓存文件)
!.yarn/releases     # Yarn发布文件(例外规则 | 这些文件需要提交)
!.yarn/plugins      # Yarn插件(例外规则 | 这些文件需要提交)

# ----------
# 环境配置文件
# ----------
.env                # 环境变量文件(由开发者创建 | 通常包含敏感信息如密钥、密码)
.env.local          # 本地环境变量文件(由开发者创建 | 包含本地特定的敏感配置)
.env.development    # 开发环境变量文件(由开发者创建 | 包含开发环境的配置 | 可能含敏感信息)
.env.test           # 测试环境变量文件(由开发者创建 | 包含测试环境的配置 | 可能含敏感信息)
.env.production     # 生产环境变量文件(由开发者创建 | 包含生产环境的配置 | 通常含敏感信息)
*.env.*             # 所有环境变量文件(由开发者创建 | 包含不同环境的配置 | 通常含敏感信息)

# ----------
# IDE/编辑器特定文件
# ----------
.vscode/            # VSCode工作区配置(由VSCode生成 | 包含用户特定设置不应共享)
!.vscode/extensions.json   # VSCode推荐扩展(例外规则 | 团队共享的推荐扩展列表应当提交)
!.vscode/settings.json     # VSCode项目设置(例外规则 | 团队共享的项目设置应当提交)
.idea/              # JetBrains IDE配置(由JetBrains IDE如WebStorm生成 | 特定于用户)
*.user              # Visual Studio用户配置(由VS生成 | 包含个人偏好设置)
*.suo               # Visual Studio解决方案用户选项(由VS生成 | 包含用户会话状态)
*.sln               # Visual Studio解决方案文件(由CMake生成 | 避免手动管理造成冲突)
*.vcxproj*          # Visual Studio项目文件(由CMake生成 | 避免手动管理造成冲突)
.project            # Eclipse项目文件(由Eclipse生成 | 特定于用户环境)
.classpath          # Eclipse类路径文件(由Eclipse生成 | 特定于用户环境)
.settings/          # Eclipse设置目录(由Eclipse生成 | 包含用户特定配置)

# ----------
# 系统/临时文件
# ----------
.DS_Store           # macOS文件夹属性元数据(由macOS自动生成 | 与项目无关的系统文件)
Thumbs.db           # Windows缩略图缓存(由Windows资源管理器自动生成 | 与项目无关)
*.log               # 日志文件(由应用程序运行时生成 | 包含临时信息且可能非常大)
*.tmp               # 临时文件(由各种工具和编辑器生成 | 临时使用且无需保留)
npm-debug.log*      # NPM调试日志(由npm运行出错时生成 | 用于调试且无需保留)
yarn-debug.log*     # Yarn调试日志(由yarn运行出错时生成 | 用于调试且无需保留)
yarn-error.log*     # Yarn错误日志(由yarn运行出错时生成 | 用于调试且无需保留)
lerna-debug.log*    # Lerna调试日志(由lerna运行出错时生成 | 用于调试且无需保留)

# ----------
# CMake生成文件
# ----------
CMakeFiles/         # CMake生成的临时目录(由CMake构建过程生成 | 包含中间文件)
CMakeCache.txt      # CMake缓存文件(由CMake配置过程生成 | 包含特定于本机的路径)
cmake_install.cmake # CMake安装脚本(由CMake生成 | 特定于构建环境)
Makefile            # CMake生成的Makefile(由CMake为类Unix系统生成 | 特定于环境)
*.cmake             # CMake配置文件(由CMake生成或用户编写 | 部分可能特定于环境)

# ----------
# 前端构建目录
# ----------
frontend/dist/      # 前端构建输出目录(由webpack/vite等构建工具生成 | 可通过源码重建)
frontend/build/     # 前端构建目录(由React等框架的构建脚本生成 | 可通过源码重建)
frontend/.cache/    # 前端构建缓存(由webpack/babel等工具生成 | 加速构建的临时文件)
frontend/public/dist/  # 前端公共资源构建目录(由构建工具生成 | 可通过源码重建)
.sass-cache/        # Sass缓存目录(由Sass编译器生成 | 临时文件可重建)
.vercel             # Vercel部署配置(由Vercel CLI生成 | 包含部署特定信息)
.netlify            # Netlify部署配置(由Netlify CLI生成 | 包含部署特定信息)

# ----------
# 后端特定文件
# ----------
backend/dist/       # 后端构建输出目录(由TypeScript编译器或打包工具生成 | 可通过源码重建)
backend/logs/       # 后端日志目录(由应用程序运行时生成 | 包含临时运行信息)
backend/uploads/    # 上传文件目录(包含用户上传内容 | 属于数据而非源代码)
backend/coverage/   # 后端测试覆盖率报告(由Jest等测试框架生成 | 可重新生成)

# ----------
# 文档生成
# ----------
docs/_build/        # 文档构建输出目录(由Sphinx等文档工具生成 | 可通过源文档重建)
docs/_static/       # 文档静态文件目录(由文档工具生成或手动添加 | 可重建)
docs/_templates/    # 文档模板目录(由文档工具使用 | 可视为源码但通常标准化)
docs/api/_build/    # API文档构建目录(由JSDoc/Doxygen等工具生成 | 可通过代码注释重建)
docs/examples/_build/ # 示例文档构建目录(由文档工具生成 | 可通过源码重建)

# ----------
# 测试输出
# ----------
test_results/       # 测试结果目录(由测试框架生成 | 临时性质可重新生成)
coverage/           # 代码覆盖率报告目录(由Istanbul/Jest等测试工具生成 | 可重新运行测试得到)
*.test              # 测试输出文件(由自定义测试脚本生成 | 临时结果文件)
Testing/            # CMake测试目录(由CTest生成 | 包含测试结果和中间文件)
CTestTestfile.cmake # CTest测试文件(由CMake的testing功能生成 | 可重新生成)
DartConfiguration.tcl # CTest配置文件(由CMake的testing功能生成 | 可重新生成)
.nyc_output/       # NYC测试覆盖率输出(由nyc工具生成 | 临时测试数据)

# ----------
# 安装目录
# ----------
install/            # 安装目录(由安装脚本生成 | 包含安装的文件 | 可重新安装生成)
dist/               # 分发目录(由打包工具生成 | 用于发布的构建产物 | 可从源码重建)