# ================
# .gitignore 文件说明
# 作用：定义哪些文件/目录应被 Git 忽略，避免提交到仓库
# 原因：排除临时文件、IDE配置、编译产物等非必要内容，保持仓库精简
# ================

# ----------
# 构建目录和编译产物
# ----------
build/          # CMake生成的构建目录,包含临时文件和二进制产物
*.obj           # 编译器生成的中间对象文件(无需共享，可重新编译生成)
*.lib           # 静态库文件(由项目构建生成，无需提交)
*.exe           # 可执行文件(由编译生成，不同平台可能不同)
*.pdb           # 程序调试数据库文件(Visual Studio 生成，含调试信息)
*.ilk           # 增量链接文件(Visual Studio 生成，编译过程临时文件)

# ----------
# 依赖管理目录
# ----------
node_modules/   # Node.js 依赖目录(通过 npm/yarn 自动生成，体积庞大且可复现)

# ----------
# IDE/编辑器特定文件
# ----------
.vscode/        # VSCode工作区配置(含用户特定的调试、任务设置，不应共享)
.idea/          # JetBrains IDE(如CLion)的配置文件
*.user          # Visual Studio用户特定配置(如窗口布局、调试路径)
*.suo           # Visual Studio解决方案用户选项(含本地缓存信息)
*.sln           # Visual Studio解决方案文件(由 CMake 生成，避免手动管理冲突)
*.vcxproj*      # Visual Studio项目文件(由 CMake 生成，避免手动管理冲突)

# ----------
# 系统/临时文件
# ----------
.DS_Store       # macOS文件夹属性元数据(非跨平台必要文件)
Thumbs.db       # Windows缩略图缓存文件
*.log           # 日志文件(运行时生成，可能包含敏感信息)
*.tmp           # 临时文件

# CMake生成文件
build/
out/
.vs/
CMakeFiles/
CMakeCache.txt
cmake_install.cmake
*.vcxproj
*.vcxproj.filters
*.vcxproj.user
*.sln

# 编译输出
*.exe
*.dll
*.so
*.dylib
*.lib
*.a
*.o
*.obj

# IDE相关
.vscode/*
!.vscode/settings.json
!.vscode/tasks.json
!.vscode/launch.json
!.vscode/extensions.json
*.swp
*.swo
*~

# 文档生成
docs/html/
docs/latex/
docs/man/
docs/rtf/

# 临时文件
*.log
*.tmp
*.temp
.DS_Store
Thumbs.db

# 安装目录
install/

# 测试输出
Testing/
CTestTestfile.cmake
DartConfiguration.tcl

# 其他
*.bak
*.backup
*.orig
*.rej
